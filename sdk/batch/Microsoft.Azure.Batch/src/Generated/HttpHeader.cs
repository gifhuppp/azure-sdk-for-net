// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

//
// This file was autogenerated by a tool.
// Do not modify it.
//

namespace Microsoft.Azure.Batch
{
    using Models = Microsoft.Azure.Batch.Protocol.Models;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An HTTP header name-value pair
    /// </summary>
    public partial class HttpHeader : ITransportObjectProvider<Models.HttpHeader>, IPropertyMetadata
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="HttpHeader"/> class.
        /// </summary>
        /// <param name='name'>The case-insensitive name of the header to be used while uploading output files.</param>
        /// <param name='value'>The value of the header to be used while uploading output files.</param>
        public HttpHeader(
            string name,
            string value)
        {
            this.Name = name;
            this.Value = value;
        }

        internal HttpHeader(Models.HttpHeader protocolObject)
        {
            this.Name = protocolObject.Name;
            this.Value = protocolObject.Value;
        }

        #endregion Constructors

        #region HttpHeader

        /// <summary>
        /// Gets the case-insensitive name of the header to be used while uploading output files.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets the value of the header to be used while uploading output files.
        /// </summary>
        public string Value { get; }

        #endregion // HttpHeader

        #region IPropertyMetadata

        bool IModifiable.HasBeenModified
        {
            //This class is compile time readonly so it cannot have been modified
            get { return false; }
        }

        bool IReadOnly.IsReadOnly
        {
            get { return true; }
            set
            {
                // This class is compile time readonly already
            }
        }

        #endregion // IPropertyMetadata

        #region Internal/private methods

        /// <summary>
        /// Return a protocol object of the requested type.
        /// </summary>
        /// <returns>The protocol object of the requested type.</returns>
        Models.HttpHeader ITransportObjectProvider<Models.HttpHeader>.GetTransportObject()
        {
            Models.HttpHeader result = new Models.HttpHeader()
            {
                Name = this.Name,
                Value = this.Value,
            };

            return result;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects.
        /// </summary>
        internal static IList<HttpHeader> ConvertFromProtocolCollection(IEnumerable<Models.HttpHeader> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<HttpHeader> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new HttpHeader(o));

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, in a frozen state.
        /// </summary>
        internal static IList<HttpHeader> ConvertFromProtocolCollectionAndFreeze(IEnumerable<Models.HttpHeader> protoCollection)
        {
            ConcurrentChangeTrackedModifiableList<HttpHeader> converted = UtilitiesInternal.CollectionToThreadSafeCollectionIModifiable(
                items: protoCollection,
                objectCreationFunc: o => new HttpHeader(o).Freeze());

            converted = UtilitiesInternal.CreateObjectWithNullCheck(converted, o => o.Freeze());

            return converted;
        }

        /// <summary>
        /// Converts a collection of protocol layer objects to object layer collection objects, with each object marked readonly
        /// and returned as a readonly collection.
        /// </summary>
        internal static IReadOnlyList<HttpHeader> ConvertFromProtocolCollectionReadOnly(IEnumerable<Models.HttpHeader> protoCollection)
        {
            IReadOnlyList<HttpHeader> converted =
                UtilitiesInternal.CreateObjectWithNullCheck(
                    UtilitiesInternal.CollectionToNonThreadSafeCollection(
                        items: protoCollection,
                        objectCreationFunc: o => new HttpHeader(o).Freeze()), o => o.AsReadOnly());

            return converted;
        }

        #endregion // Internal/private methods
    }
}